/* Module Name: debug_type.h
 * PURPOSE: Definitions for the Debug type
 * NOTES:
 *
 * HISTORY:
 *    02/26/2008 - Duo Chen, Created
 *
 * Copyright(C)      Accton Corporation, 2008
 */


#ifndef _DEBUG_TYPE_H
#define _DEBUG_TYPE_H

/* INCLUDE FILE DECLARATIONS
 */
#include "sys_adpt.h"


/* NAMING CONSTANT DECLARATIONS
 */
/*remote+console*/
#define DEBUG_TYPE_MAX_SESSION_NUM (SYS_ADPT_MAX_TELNET_NUM + 1)


/* MACRO FUNCTION DECLARATIONS
 */


/* DATA TYPE DECLARATIONS
 */
typedef enum
{
    DEBUG_TYPE_RETURN_OK       =0,
    DEBUG_TYPE_RETURN_FAIL,
    DEBUG_TYPE_RETURN_INVALID_ARG,
    DEBUG_TYPE_RETURN_MASTER_MODE_ERROR,
    DEBUG_TYPE_RETURN_RATELIMIT,
}DEBUG_TYPE_ReturnValue_T;


typedef enum
{
    DEBUG_TYPT_MATCH_ALL       =0, /*classification match all*/
    DEBUG_TYPE_MATCH_ANY,          /*classification match any*/
    DEBUG_TYPE_MATCH_ALL_ANY,      /*classification match all && feature match any*/
    DEBUG_TYPE_MATCH_ANY_ANY       /*classification match any && feature match any*/
}DEBUG_TYPE_Matched_T;


typedef enum
{
    DEBUG_TYPE_AAA       =0,
    DEBUG_TYPE_ARP,
    DEBUG_TYPE_CLUSTER,
    DEBUG_TYPE_DHCP,
    DEBUG_TYPE_DHCPSNP,
    DEBUG_TYPE_DOT1X,
    DEBUG_TYPE_LACP,
    DEBUG_TYPE_PSEC,
    DEBUG_TYPE_TACACS,
    DEBUG_TYPE_TELNET,
    DEBUG_TYPE_RADIUS,
    DEBUG_TYPE_XSTP,
    DEBUG_TYPE_IGMPSNP_MVR,
    DEBUG_TYPE_MVR6,
    DEBUG_TYPE_MLDSNP,
    DEBUG_TYPE_SYNC_E,
    DEBUG_TYPE_PTP,
    DEBUG_TYPE_ELPS,
    DEBUG_TYPE_VXLAN,
    DEBUG_TYPE_MAX_CSC_NUM
}DEBUG_TYPE_CscId_E;

enum DEBUG_TYPE_ArpFlag_E
{
    DEBUG_TYPE_ARP_NONE       =0x00000000L,
    DEBUG_TYPE_ARP_PACKETS    =0x00000001L,
    DEBUG_TYPE_ARP_ALL        =0x0000000FL
};

enum DEBUG_TYPE_AaaFlag_E
{
    DEBUG_TYPE_AAA_NONE                 = 0x00000000L,
    DEBUG_TYPE_AAA_CONFIG               = 0x00000100L,
    DEBUG_TYPE_AAA_EVENT                = 0x00000200L,
    DEBUG_TYPE_AAA_DATABASE             = 0x00000400L,
    DEBUG_TYPE_AAA_SHOW_ACCT            = 0x00000001L,
    DEBUG_TYPE_AAA_SHOW_AUTHOR          = 0X00000004L,
    DEBUG_TYPE_AAA_SHOW_ALL             = 0X000000FFL,
    DEBUG_TYPE_AAA_ALL                  = 0x0000FFFFL
};

enum DEBUG_TYPE_Dot1xFlag_E
{
    DEBUG_TYPE_DOT1X_NONE                 = 0X00000000L,
    DEBUG_TYPE_DOT1X_CONFIG               = 0X00000100L,
    DEBUG_TYPE_DOT1X_EVENT                = 0X00000200L,
    DEBUG_TYPE_DOT1X_DATABASE             = 0X00000400L,
    DEBUG_TYPE_DOT1X_PACKET               = 0X00000800L,
    DEBUG_TYPE_DOT1X_SHOW_SM_PAE          = 0X00000001L,
    DEBUG_TYPE_DOT1X_SHOW_SM_BACKEND      = 0X00000002L,
    DEBUG_TYPE_DOT1X_SHOW_ALL             = 0X000000FFL,
    DEBUG_TYPE_DOT1X_ALL                  = 0X0000FFFFL
};

enum DEBUG_TYPE_PSecFlag_E
{
    DEBUG_TYPE_PSEC_NONE              = 0x00000000L,
    DEBUG_TYPE_PSEC_CONFIG            = 0x00000100L,
    DEBUG_TYPE_PSEC_EVENT             = 0x00000200L,
    DEBUG_TYPE_PSEC_DATABASE          = 0x00000400L,
    DEBUG_TYPE_PSEC_SHOW_ALL          = 0X000000FFL,
    DEBUG_TYPE_PSEC_ALL               = 0x0000FFFFL
};

enum DEBUG_TYPE_TacacsFlag_E
{
    DEBUG_TYPE_TACACS_NONE            = 0x00000000L,
    DEBUG_TYPE_TACACS_CONFIG          = 0x00000100L,
    DEBUG_TYPE_TACACS_EVENT           = 0x00000200L,
    DEBUG_TYPE_TACACS_DATABASE        = 0x00000400L,
    DEBUG_TYPE_TACACS_PACKET          = 0x00000800L,
    DEBUG_TYPE_TACACS_AVPAIR          = 0x00001000L,
    DEBUG_TYPE_TACACS_SHOW_ACCT       = 0x00000001L,
    DEBUG_TYPE_TACACS_SHOW_AUTHEN     = 0x00000002L,
    DEBUG_TYPE_TACACS_SHOW_AUTHOR     = 0X00000004L,
    DEBUG_TYPE_TACACS_SHOW_ALL        = 0X000000FFL,
    DEBUG_TYPE_TACACS_ALL             = 0x0000FFFFL
};

enum DEBUG_TYPE_TelnetFlag_E
{
    DEBUG_TYPE_TELNET_NONE            = 0x00000000L,
    DEBUG_TYPE_TELNET_CONFIG          = 0x00000100L,
    DEBUG_TYPE_TELNET_EVENT           = 0x00000200L,
    DEBUG_TYPE_TELNET_DATABASE        = 0x00000400L,
    DEBUG_TYPE_TELNET_PACKET          = 0x00000800L,
    DEBUG_TYPE_TELNET_SHOW_ALL        = 0X000000FFL,
    DEBUG_TYPE_TELNET_ALL             = 0x0000FFFFL
};

enum DEBUG_TYPE_RadiusFlag_E
{
    DEBUG_TYPE_RADIUS_NONE            = 0x00000000L,
    DEBUG_TYPE_RADIUS_CONFIG          = 0x00000100L,
    DEBUG_TYPE_RADIUS_EVENT           = 0x00000200L,
    DEBUG_TYPE_RADIUS_DATABASE        = 0x00000400L,
    DEBUG_TYPE_RADIUS_PACKET          = 0x00000800L,
    DEBUG_TYPE_RADIUS_AVPAIR          = 0x00001000L,
    DEBUG_TYPE_RADIUS_SHOW_ACCT       = 0x00000001L,
    DEBUG_TYPE_RADIUS_SHOW_AUTHEN     = 0x00000002L,
    DEBUG_TYPE_RADIUS_SHOW_AUTHOR     = 0X00000004L,
    DEBUG_TYPE_RADIUS_SHOW_ALL        = 0X000000FFL,
    DEBUG_TYPE_RADIUS_ALL             = 0x0000FFFFL
};

enum DEBUG_TYPE_LacpFlag_E
{
    DEBUG_TYPE_LACP_NONE            =0x00000000L,
    DEBUG_TYPE_LACP_CONFIG          =0x00000100L,
    DEBUG_TYPE_LACP_EVENT           =0x00000200L,
    DEBUG_TYPE_LACP_PACKET          =0x00000400L,
    DEBUG_TYPE_LACP_PACKET_DETAIL   =0x00000401L,
    DEBUG_TYPE_LACP_STATE_MACHING   =0x00000800L,
    DEBUG_TYPE_LACP_DATABASE        =0x00001000L,
    DEBUG_TYPE_LACP_ALL             =0xFFFFFF00L
};

enum DEBUG_TYPE_DhcpFlag_E
{
    DEBUG_TYPE_DHCP_NONE            =0x00000000L,
    DEBUG_TYPE_DHCP_CONFIG          =0x00000100L,
    DEBUG_TYPE_DHCP_EVENT           =0x00000200L,
    DEBUG_TYPE_DHCP_DATABASE        =0x00000400L,
    DEBUG_TYPE_DHCP_PACKET          =0x00000800L,
    DEBUG_TYPE_DHCP_CLIENT          =0x00000001L,
    DEBUG_TYPE_DHCP_RELAY           =0x00000002L,
    DEBUG_TYPE_DHCP_SERVER          =0x00000004L,
    DEBUG_TYPE_DHCP_ALL             =0x00000FFFL
};

enum DEBUG_TYPE_DhcpSnpFlag_E
{
    DEBUG_TYPE_DHCPSNP_NONE         =0x00000000L,
    DEBUG_TYPE_DHCPSNP_CONFIG       =0x00000100L,
    DEBUG_TYPE_DHCPSNP_EVENT        =0x00000200L,
    DEBUG_TYPE_DHCPSNP_PACKET       =0x00000400L,
    DEBUG_TYPE_DHCPSNP_DATABASE     =0x00000800L,
    DEBUG_TYPE_DHCPSNP_ALL          =0x00000F00L
};

enum DEBUG_TYPE_ClusterFlag_E
{
    DEBUG_TYPE_CLUSTER_NONE         =0x00000000L,
    DEBUG_TYPE_CLUSTER_EVENT        =0x00000100L,
    DEBUG_TYPE_CLUSTER_PACKET       =0x00000200L,
    DEBUG_TYPE_CLUSTER_DATABASE     =0x00000400L,
    DEBUG_TYPE_CLUSTER_ALL          =0xFFFFFF00L
};

enum DEBUG_TYPE_XstpFlag_E
{
    DEBUG_TYPE_XSTP_NONE       =0x00000000L,
    DEBUG_TYPE_XSTP_BPDU       =0x00000001L,
    DEBUG_TYPE_XSTP_EVENTS     =0x00000002L,
    DEBUG_TYPE_XSTP_ROOT       =0x00000004L,
    DEBUG_TYPE_XSTP_ALL        =0xFFFFFFFFL
};

enum DEBUG_TYPE_IgmpMvrFlag_E
{
    DEBUG_TYPE_IGMP_MVR_NONE      = 0x00000000L,
    DEBUG_TYPE_IGMP_MVR_DECODE    = BIT_0,
    DEBUG_TYPE_IGMP_MVR_ENCODE    = BIT_1,
    DEBUG_TYPE_IGMP_MVR_EVENT     = BIT_2,
    DEBUG_TYPE_IGMP_MVR_ALL       = 0xFFFFFFFFL,
};


enum DEBUG_TYPE_Mvr6_E
{
    DEBUG_TYPE_MVR6_NONE      = 0x00000000L,
    DEBUG_TYPE_MVR6_DECODE    = BIT_0,
    DEBUG_TYPE_MVR6_ENCODE    = BIT_1,
    DEBUG_TYPE_MVR6_EVENT     = BIT_2,
    DEBUG_TYPE_MVR6_ALL       = 0xFFFFFFFFL,
};

enum DEBUG_TYPE_Mldsnp_E
{
    DEBUG_TYPE_MLDSNP_NONE      = 0x00000000L,
    DEBUG_TYPE_MLDSNP_DECODE    = BIT_1,
    DEBUG_TYPE_MLDSNP_ENCODE    = BIT_2,
    DEBUG_TYPE_MLDSNP_EVENT     = BIT_3,
    DEBUG_TYPE_MLDSNP_ALL       = 0xFFFFFFFFL,
};
enum DEBUG_TYPE_SyncEFlag_E
{
    DEBUG_TYPE_SYNC_E_NONE            = 0x00000000L,
    DEBUG_TYPE_SYNC_E_EVENT           = 0x00000002L,
    DEBUG_TYPE_SYNC_E_PACKET_RX       = 0x00000004L,
    DEBUG_TYPE_SYNC_E_PACKET_TX       = 0x00000008L,
    DEBUG_TYPE_SYNC_E_ALL             = 0xFFFFFFFFL
};

enum DEBUG_TYPE_PTPFlag_E
{
    DEBUG_TYPE_PTP_NONE            = 0x00000000L,
    DEBUG_TYPE_PTP_RX_SYNC_FOLLOW  = BIT_1,
    DEBUG_TYPE_PTP_TX_SYNC_FOLLOW  = BIT_2,
    DEBUG_TYPE_PTP_RX_PDELAY       = BIT_3,
    DEBUG_TYPE_PTP_TX_PDELAY       = BIT_4,
    DEBUG_TYPE_PTP_RX_DELAY        = BIT_5,
    DEBUG_TYPE_PTP_TX_DELAY        = BIT_6,
    DEBUG_TYPE_PTP_RX_ANNOUNCE     = BIT_7,
    DEBUG_TYPE_PTP_TX_ANNOUNCE     = BIT_8,
    DEBUG_TYPE_PTP_MGMT            = BIT_9,
    DEBUG_TYPE_PTP_RX_VERIFY_PDU   = BIT_10,
    DEBUG_TYPE_PTP_ALL             = 0xFFFFFFFFL
};

enum DEBUG_TYPE_ELPSFlag_E
{
    DEBUG_TYPE_ELPS_NONE            = 0x00000000L,
    DEBUG_TYPE_ELPS_RX              = BIT_1,
    DEBUG_TYPE_ELPS_TX              = BIT_2,
    DEBUG_TYPE_ELPS_EVENT           = BIT_3,
    DEBUG_TYPE_ELPS_ALL             = 0xFFFFFFFFL
};

enum DEBUG_TYPE_VxlanFlag_E
{
    DEBUG_TYPE_VXLAN_NONE            = 0x00000000L,
    DEBUG_TYPE_VXLAN_DATABASE        = BIT_0,
    DEBUG_TYPE_VXLAN_EVENT           = BIT_1,
    DEBUG_TYPE_VXLAN_VNI             = BIT_2,
    DEBUG_TYPE_VXLAN_VTEP            = BIT_3,
    DEBUG_TYPE_VXLAN_ALL             = 0xFFFFFFFFL
};
/* EXPORTED SUBPROGRAM SPECIFICATIONS
 */


#endif /* End of _DEBUG_TYPE_H */
